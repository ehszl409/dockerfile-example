pipeline {
    agent any
    triggers{
        githubPush()
    }
    options{
        timestamps()
    } 
    stages{
        stage('Github Clone & Checkout'){
            steps{
                git branch: 'main', url: 'https://github.com/ehszl409/dockerfile-example.git'
                    // credentialsId: 'github-MZ_jenkins_cicd'
            }
        }
        stage('httpd Build'){
            steps{
                script{
                    // Docker hub 에 로그인 하기 위해 사용
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub') {
                        // Dockerfile 로 이미지 생성 
                        // docker.build("태그명", "Dockerfile 경로") docker pipeline 설치 후 사용 가능
                        docker.build('ehszl409/jenkins-test-httpd', './$PROJECT_NAME/ubuntu_apache2/')    
                    }
                }
            }
        }
        stage('nginx Build'){
            steps{
                script{
                    // Docker hub 에 로그인 하기 위해 사용
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub') {
                        // Dockerfile 로 이미지 생성 
                        // docker.build("태그명", "Dockerfile 경로") docker pipeline 설치 후 사용 가능
                        docker.build('ehszl409/jenkins-test-nginx', './$PROJECT_NAME/ubuntu_nginx/')    
                    }
                }
            }
        }
        stage('nginxLB Build'){
            steps{
                script{
                    // Docker hub 에 로그인 하기 위해 사용
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub') {
                        // Dockerfile 로 이미지 생성 
                        // docker.build("태그명", "Dockerfile 경로") docker pipeline 설치 후 사용 가능
                        docker.build('ehszl409/jenkins-test-nginxlb', './$PROJECT_NAME/ubuntu_nginx_loadbalancer/')    
                    }
                }
            }
        }
        stage('Docker Image Push'){
            steps{
                script{
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub'){
                        def img-httpd = docker.image('ehszl409/jenkins-test-httpd')
                        def img-nginx = docker.image('ehszl409/jenkins-test-nginx')
                        def img-nginxlb = docker.image('ehszl409/jenkins-test-nginxlb')
      
                        img-httpd.push('0.2')
                        img-nginx.push('0.2')
                        img-nginxlb.push('0.2')
                        img-httpd.push('latest')
                        img-nginx.push('latest')
                        img-nginxlb.push('latest')
                    }
                }
            }
        }
    }
    post{
        cleanup{
            emailext subject: 'DEFAULT_SUBJECT',
                     to: 'cles2459@gmail.com',
                     body: 'DEFAULT_CONTENT'
            cleanWs() // 작업영역 삭제
        }
    }
}